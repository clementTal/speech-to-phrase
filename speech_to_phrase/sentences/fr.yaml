---
language: fr

lists:
  color:
    values:
      - "blanc"
      # - "blanche"
      - "noir"
      # - "noire"
      - "rouge"
      - "orange"
      - "jaune"
      - "vert"
      # - "verte"
      - "bleu"
      # - "bleue"
      - "violet"
      # - "violettte"
      - "marron"
      - "rose"
  brightness:
    range:
      from: 10
      to: 100
      step: 10
  seconds:
    range:
      from: 10
      to: 100
  minutes:
    range:
      from: 1
      to: 100
  hours:
    range:
      from: 1
      to: 24
  cover_classes:
    values:
      - store
      # - stores
      - rideau
      # - rideaux
      - portes de garage
      # - portess de garages
      - fenêtre
      # - fenêtres
      - volet
      # - volets
      - portail
      # - portails

expansion_rules:
  le: "(le |la |les |l')"
  dans: "(dans|du|de|des|à|au|aux|sur)"
  de: "(du|de|des)"
  tous: "(tout|tous|toute[s])
  un: "(un|une)"
  "timer: "(minuteur|timer|alarme)"

  # Verbs
  active: "(active|activer|démarre|démarrer|allume|allumer)"
  allume: "(allume|allumer)"
  augmente: "(augmente|augmenter|monte|monter)"
  diminue: "(diminue|diminuer|baisse|baisser)"
  eteins: "(éteins|éteindre|désactive|désactiver|stoppe|stopper|arrête|arrêter|coupe|couper)"
  ferme: "(ferme|fermer|baisse|baisser|descendre|descends)"
  mets: "(mets|mettre|passe|passer)"
  reprends: "(reprends|relance)"
  lecture: "(lecture|visionnage)"
  ouvre: "(ouvre|ouvrir)"
  regle: "(règle|régler|mets|mettre|ajuste|ajuster|change|changer)"
  supprime: "(supprime|supprimer)"
  verrouille: "(verrouiller|verrouille)"
  deverrouille: "(déverrouiller|déverrouille)"
  monte: "(monte|monter)"
  baisse: "(baisse|baisser|descendre|descends)"

  # Domains and Things
  lumiere: "(lumière[s])"
  media: "(chanson|élément|film|vidéo|épisode|radio|média)"
  serrure: "(verrou[s]|serrure[s]|porte[s])"

intents:
  # nevermind
  HassNevermind:
    data:
      - sentences:
          - "oublie[s]"
          - "annule[r]"
          - "chut"
          - "tais toi"
          - "silence"
        metadata:
          slot_combination: "default"

  # date, time, weather
  HassGetCurrentDate:
    data:
      - sentences:
          - "quel jour sommes-nous"
          - "on est quel jour"
          - "quel jour est-il"
        metadata:
          slot_combination: "default"

  HassGetCurrentDate:
    data:
      - sentences:
          - "quel jour sommes-nous"
        metadata:
          slot_combination: "default"
  
  HassGetWeather:
    data:
      - sentences:
          - "quel temps fait-il"
          - "quel est la météo"
        metadata:
          slot_combination: "default"
      - sentences:
          - "quel temps fait-il à [<le>]{name}"
          - "quel est la météo à [<le>]{name}"
        requires_context:
          domain: weather
        metadata:
          slot_combination: "name_only"

  # HassTurnOn (Generic):
  HassTurnOn:
    data:
      # area + context awareness
      - sentences:
          - "<allume> la lumière"
          - "<allume> les lumières"
        slots:
          domain: light
        metadata:
          slot_combination: "domain_light"
          context_area: true

      - sentences:
          - "<active> [<le>]{name}"
        requires_context:
          domain:
            - "light"
            - "fan"
            - "switch"
            - "media_player"
            - "input_boolean"
        metadata:
          slot_combination: "name_only"

      - sentences:
          - "<active> [<le>]{name} <dans> [<le>]{area}"
        requires_context:
          domain:
            - "light"
            - "fan"
            - "switch"
            - "media_player"
            - "input_boolean"
        metadata:
          slot_combination: "name_area"
            
      # HassTurnOn (Light):
      # area
      - sentences:
          - "<allume> [toutes] les lumières [<dans>] [<le>]{area}"
          - "<allume> [<le>]{area}"
        slots:
          domain: light
        metadata:
          slot_combination: "area_domain_light"

      # TODO: decide if we really want this by default
      # all
      # - sentences:
      #     - "<allume> toutes les lumières"
      #   slots:
      #     domain: light

      # floor
      - sentences:
          - "<allume> [toutes] les lumières [<dans>] [<le>]{floor}"
          - "<allume> [<le>]{floor}"
        slots:
          domain: light
        metadata:
          slot_combination: "floor_domain_light"

      # HassTurnOn (Cover):
      # name
      - sentences:
          - "<ouvre> [<le>]{name}"
        requires_context:
          domain: cover
        metadata:
          slot_combination: "name_cover"

      # device_class and area
      - sentences:
          - "<ouvre> [<tous>] [<le>]{cover_classes} [<dans>] [<le>]{area}"
        slots:
          domain: cover
        metadata:
          slot_combination: "area_device_class_cover"

      # TODO: decide if we really want this by default
      # device_class
      # - sentences:
      #     - "<ouvre> <tous> [<le>]{cover_classes}"
      #   slots:
      #     domain: cover

      # Context area awareness
      - sentences:
          - "<ouvre> [<le>]{cover_classes}"
        slots:
          domain: cover
        metadata:
          slot_combination: "device_class_cover"
          context_area: true

      # device_class and floor
      - sentences:
          - "<ouvre> [<tous>] [<le>]{cover_classes} [<dans>] [<le>]{floor}"
        slots:
          domain: cover
        metadata:
          slot_combination: "floor_device_class_cover"

      # HassTurnOn (Locks):
      # name
      - sentences:
          - "<verrouille> [<le>]{name}"
        requires_context:
          domain: lock
        metadata:
          slot_combination: "name_lock"

      # TODO: decide if we really want this by default
      # area
      # - sentences:
      #     - "<verrouille> [<le>]{area}"
      #     - "<verrouille> [<tous>] [<le>] <serrure> [<dans>] [<le>]{area}"
      #   slots:
      #     domain: lock

      # TODO: decide if we really want this by default
      # context area awareness
      # - sentences:
      #     - "<verrouille> [<le>] <serrure>"
      #   slots:
      #     domain: lock

      # TODO: decide if we really want this by default
      # floor
      # - sentences:
      #     - "<verrouille> [<le>]{floor}"
      #     - "<verrouille> [<tous>] [<le>] <serrure> [<dans>] [<le>]{floor}"
      #   slots:
      #     domain: lock

      # TODO: decide if we really want this by default
      # the whole house
      # - sentences:
      #     - "<verrouille> <tous> [<le>] <serrure>"
      #   slots:
      #     domain: lock

  # HassTurnOff (Generic)
  HassTurnOff:
    data:
      # area + context awareness
      - sentences:
          - "<eteins> [<le>]<lumiere>"
        slots:
          domain: light
        metadata:
          slot_combination: "domain_light"
          context_area: true

      - sentences:
          - "<eteins> [<le>]{name}"
        requires_context:
          domain:
            - "light"
            - "fan"
            - "switch"
            - "input_boolean"
            - "media_player"
        metadata:
          slot_combination: "name_only"

      - sentences:
          - "<eteins> [<le>]{name} <dans> [<le>]{area}"
        requires_context:
          domain:
            - "light"
            - "fan"
            - "switch"
            - "input_boolean"
            - "media_player"
        metadata:
          slot_combination: "name_area"

      # HassTurnOff (Light)
      # area
      - sentences:
          - "<eteins> [toutes] les lumières [<dans>] [<le>]{area}"
          - "<eteins> [<le>]{area}"
        slots:
          domain: light
        metadata:
          slot_combination: "area_domain_light"

      # TODO: decide if we really want this by default
      # all
      # - sentences:
      #     - "<eteins> <tous> [<le>]<lumiere>"
      #   slots:
      #     domain: light

      # floor
      - sentences:
          - "<eteins> [toutes] les lumières [<dans>] [<le>]{floor}"
          - "<eteins> [<le>]{floor}"
        slots:
          domain: light
        metadata:
          slot_combination: "floor_domain_light"

      # HassTurnOff (Cover)
      # name
      - sentences:
          - "<ferme> [<le>]{name}"
        requires_context:
          domain: cover
        metadata:
          slot_combination: "name_cover"

      # device_class and area
      - sentences:
          - "<ferme> [<tous>] [<le>]{cover_classes} [<dans>] [<le>]{area}"
        slots:
          domain: cover
        metadata:
          slot_combination: "area_device_class_cover"

      # TODO: decide if we really want this by default
      # device_class
      # - sentences:
      #     - "<ferme> <tous> [<le>]{cover_classes}"
      #   slots:
      #     domain: cover

      # Context area awareness
      - sentences:
          - "<ferme> [<le>]{cover_classes}"
        slots:
          domain: cover
        metadata:
          slot_combination: "device_class_cover"
          context_area: true

      # device_class and floor
      - sentences:
          - "<ferme> [<tous>] [<le>]{cover_classes} [<dans>] [<le>]{floor}"
        slots:
          domain: cover
        metadata:
          slot_combination: "floor_device_class_cover"

      # HassTurnOff (Locks)
      # name
      - sentences:
          - "<deverrouille> [<le>]{name}"
        requires_context:
          domain: lock
        metadata:
          slot_combination: "name_lock"

      # TODO: decide if we really want this by default
      # area
      # - sentences:
      #     - "<deverrouille> [<le>]{area}"
      #     - "<deverrouille> [<tous>] [<le>] <serrure> [<dans>] [<le>]{area}"
      #   slots:
      #     domain: lock

      # TODO: decide if we really want this by default
      # context area awareness
      # - sentences:
      #     - "<deverrouille> [<le>] <serrure>"
      #   slots:
      #     domain: lock

      # TODO: decide if we really want this by default
      # floor
      # - sentences:
      #     - "<deverrouille> [<le>]{floor}"
      #     - "<deverrouille> [<tous>] [<le>] <serrure> [<dans>] [<le>]{floor}"
      #   slots:
      #     domain: lock

      # TODO: decide if we really want this by default
      # the whole house
      # - sentences:
      #     - "<deverrouille> <tous> [<le>] <serrure>"
      #   slots:
      #     domain: lock
      

  # HassLightSet
  HassLightSet:
    data:
      # brightness (name)
      - sentences:
          - "(<regle>|<augmente>|<diminue>) la luminosité [<de>] [<le>]{name} à {brightness} pourcent"
          - "(<allume>|<regle>|<augmente>|<diminue>) [<le>]{name} à {brightness} pourcent"
        requires_context:
          domain: light
        metadata:
          slot_combination: "name_brightness"

      # brightness (area)
      - sentences:
          - "(<regle>|<augmente>|<diminue>) la luminosité [<dans>] [<le>]{area} à {brightness} pourcent"
          - "(<allume>|<regle>|<augmente>|<diminue>) [<le>]{area} à {brightness} pourcent"
        metadata:
          slot_combination: "area_brightness"

      # brigtness (area + context awareness)
      - sentences:
          - "(<regle>|<augmente>|<diminue>) la luminosité à {brightness} pourcent"
        metadata:
          slot_combination: "brightness_only"
          context_area: true

      # brightness (floor)
      - sentences:
          - "(<regle>|<augmente>|<diminue>) la luminosité [<dans>] [<le>]{floor} à {brightness} pourcent"
          - "(<allume>|<regle>|<augmente>|<diminue>) [<le>]{floor} à {brightness} pourcent"
        metadata:
          slot_combination: "floor_brightness"

      # color (name)
      - sentences:
          - "(<regle>|<allume>) [<le>]{name} en {color}"
        requires_context:
          domain: light
        metadata:
          slot_combination: "name_color"

      # color (area)
      - sentences:
          - "(<regle>|<allume>) [<le>]{area} en {color}"
        metadata:
          slot_combination: "area_color"

      # color (area + context awareness)
      - sentences:
          - "<regle> la couleur [en] {color}"
          - "(<regle>|<allume>) les lumières en {color}"
        metadata:
          slot_combination: "color_only"
          context_area: true

      # color (floor)
      - sentences:
          - "(<regle>|<allume>) [<le>]{floor} en {color}"
        metadata:
          slot_combination: "floor_color"

  # HassStartTimer
  HassStartTimer:
    data:
      # seconds
      - sentences:
          - "[met <un>] <timer> {seconds} secondes"
        metadata:
          slot_combination: "seconds_only"

      # minutes
      - sentences:
          - "[met <un>] <timer> [dans] {minutes} minutes"
        metadata:
          slot_combination: "minutes_only"

      # hours
      - sentences:
          - "[met <un>] <timer> [dans] {hours} heures"
        metadata:
          slot_combination: "hours_only"

      # hours + minutes
      - sentences:
          - "[met <un>] <timer> {hours} heures et {minutes} minutes"
        metadata:
          slot_combination: "hours_minutes"

  # HassCancelTimer:
  HassCancelTimer:
    data:
      # No name
      - sentences:
          - "<supprime> [<le>] <timer>"
        metadata:
          slot_combination: "default"

  # HassCancelAllTimers:
  HassCancelAllTimers:
    data:
      # All timers
      - sentences:
          - "<supprime> tous (<le>|mes) <timer>"
        metadata:
          slot_combination: "default"

  # HassPauseTimer
  HassPauseTimer:
    data:
      # No name
      - sentences:
          - "<mets> [<le>] <timer> en pause"
          - "pause [<le>] <timer>"
        metadata:
          slot_combination: "default"

  # HassUnpauseTimer
  HassUnpauseTimer:
    data:
      # No name
      - sentences:
          - "<reprends> [<le>] <timer>"
        metadata:
          slot_combination: "default"

  # HassTimerStatus:
  HassTimerStatus:
    data:
      # No name
      - sentences:
          - "combien de temps reste-t-il"
          - "combien de temps reste-t-il (sur|dans) (<le>|mon) <timer>"
          - "quand est le prochain <timer>"
        metadata:
          slot_combination: "default"

  # HassMediaPause:
  HassMediaPause:
    data:
      # name
      - sentences:
          - "<mets> [<le>]{name} (sur|en) pause"
        requires_context:
          domain: media_player
        metadata:
          slot_combination: "name_only"

      # Area (Context awareness)
      - sentences:
          - "pause"
        metadata:
          slot_combination: "default"
          context_area: true

      # Area
      - sentences:
          - "<mets> [<le>]<media> (sur|en) pause <dans> [<le>]{area}"
        metadata:
          slot_combination: "area_only"

  # HassMediaUnpause:
  HassMediaUnpause:
    data:
      # name
      - sentences:
          - "<lecture> sur [<le>]{name}"
        requires_context:
          domain: media_player
        metadata:
          slot_combination: "name_only"

      # Area (Context awareness)
      - sentences:
          - "<lecture>"
        metadata:
          slot_combination: "default"
          context_area: true

      # Area
      - sentences:
          - "<lecture> <dans> [<le>]{area}"
        metadata:
          slot_combination: "area_only"

  # HassMediaNext:
  HassMediaNext:
    data:
      # name
      - sentences:
          - "<media> suivant[e] sur [<le>]{name}"
        requires_context:
          domain: media_player
        metadata:
          slot_combination: "name_only"

      # Area (Context awareness)
      - sentences:
          - "[<media>] suivant[e]"
        metadata:
          slot_combination: "default"
          context_area: true

      # Area
      - sentences:
          - "<media> suivant[e] <dans> [<le>]{area}"
        metadata:
          slot_combination: "area_only"

  # HassGetTemperature:
  HassClimateGetTemperature:
    data:
      # area
      - sentences:
          - "combien fait-il <dans> [<le>]{area}"
        metadata:
          slot_combination: "area_only"

      # context awareness
      - sentences:
          - "combien fait-il"
        metadata:
          slot_combination: "default"
          context_area: true

  # HassGetState
  HassGetState:
    data:
      - sentences:
          - "quel est [(l'état|le statut|la valeur) de] [<le>]{name}"
        requires_context:
          domain:
            - "sensor"
            - "binary_sensor"
        metadata:
          slot_combination: "name_sensor"
